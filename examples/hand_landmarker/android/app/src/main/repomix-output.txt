
================================================================
Directory Structure
================================================================
res/layout/activity_main.xml

java/com/example/lingoflow/HandLandmarkerHelper.kt
java/com/example/lingoflow/MainActivity.kt
java/com/example/lingoflow/OverlayView.kt

================
File: res/layout/activity_main.xml
================
<?xml version="1.0" encoding="utf-8"?>

<androidx.coordinatorlayout.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@android:color/transparent">

    <androidx.camera.view.PreviewView
        android:id="@+id/view_finder"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:scaleType="fillStart" />

    <com.example.lingoflow.OverlayView
        android:id="@+id/overlay"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

</androidx.coordinatorlayout.widget.CoordinatorLayout>

================
File: java/com/example/lingoflow/HandLandmarkerHelper.kt
================
package com.example.lingoflow

import android.content.Context
import android.graphics.Bitmap
import android.graphics.Matrix
import android.os.SystemClock
import android.util.Log
import androidx.annotation.VisibleForTesting
import androidx.camera.core.ImageProxy
import com.google.mediapipe.framework.image.BitmapImageBuilder
import com.google.mediapipe.framework.image.MPImage
import com.google.mediapipe.tasks.core.BaseOptions
import com.google.mediapipe.tasks.vision.core.RunningMode
import com.google.mediapipe.tasks.vision.handlandmarker.HandLandmarker
import com.google.mediapipe.tasks.vision.handlandmarker.HandLandmarkerResult

class HandLandmarkerHelper(
        val context: Context,
        // this listener is only used when running in RunningMode.LIVE_STREAM
        val handLandmarkerHelperListener: LandmarkerListener? = null
) {

    // For this example this needs to be a var so it can be reset on changes.
    // If the Hand Landmarker will not change, a lazy val would be preferable.
    private var handLandmarker: HandLandmarker? = null

    init {
        setupHandLandmarker()
    }

    fun clearHandLandmarker() {
        handLandmarker?.close()
        handLandmarker = null
    }

    // Return running status of HandLandmarkerHelper
    fun isClose(): Boolean {
        return handLandmarker == null
    }

    // Initialize the Hand landmarker using current settings on the
    // thread that is using it. CPU can be used with Landmarker
    // that are created on the main thread and used on a background thread, but
    // the GPU delegate needs to be used on the thread that initialized the
    // Landmarker
    fun setupHandLandmarker() {
        // Check if runningMode is consistent with handLandmarkerHelperListener

        if (handLandmarkerHelperListener == null) {
            throw IllegalStateException(
                    "handLandmarkerHelperListener must be set when runningMode is LIVE_STREAM."
            )
        }

        try {
            // Set general hand landmarker options
            val baseOptions =
                    BaseOptions.builder().setModelAssetPath("hand_landmarker.task").build()
            // Create an option builder with base options and specific
            // options only use for Hand Landmarker.
            val options =
                    HandLandmarker.HandLandmarkerOptions.builder()
                            .setBaseOptions(baseOptions)
                            .setRunningMode(RunningMode.LIVE_STREAM)
                            // The ResultListener and ErrorListener only use for LIVE_STREAM mode.
                            .setResultListener(::returnLivestreamResult)
                            .setErrorListener(::returnLivestreamError)
                            .build()

            handLandmarker = HandLandmarker.createFromOptions(context, options)
        } catch (e: IllegalStateException) {
            handLandmarkerHelperListener.onError(
                    "Hand Landmarker failed to initialize. See error logs for details"
            )
            Log.e(TAG, "MediaPipe failed to load the task with error: " + e.message)
        } catch (e: RuntimeException) {
            // This occurs if the model being used does not support GPU
            handLandmarkerHelperListener.onError(
                    "Hand Landmarker failed to initialize. See error logs for details"
            )
            Log.e(TAG, "Image classifier failed to load model with error: " + e.message)
        }
    }

    // Convert the ImageProxy to MP Image and feed it to HandlandmakerHelper.
    fun detectLiveStream(imageProxy: ImageProxy) {

        val frameTime = SystemClock.uptimeMillis()

        // Copy out RGB bits from the frame to a bitmap buffer
        val bitmapBuffer =
                Bitmap.createBitmap(imageProxy.width, imageProxy.height, Bitmap.Config.ARGB_8888)
        imageProxy.use { bitmapBuffer.copyPixelsFromBuffer(imageProxy.planes[0].buffer) }
        imageProxy.close()

        val matrix =
                Matrix().apply {
                    // Rotate the frame received from the camera to be in the same direction as
                    // it'll be shown
                    postRotate(imageProxy.imageInfo.rotationDegrees.toFloat())

                    //  // flip image if user use front camera
                    //  if (isFrontCamera) {
                    //     postScale(-1f, 1f, imageProxy.width.toFloat(), imageProxy.height.toFloat())
                    // }
                }
        val rotatedBitmap =
                Bitmap.createBitmap(
                        bitmapBuffer,
                        0,
                        0,
                        bitmapBuffer.width,
                        bitmapBuffer.height,
                        matrix,
                        true
                )

        // Convert the input Bitmap object to an MPImage object to run inference
        val mpImage = BitmapImageBuilder(rotatedBitmap).build()

        detectAsync(mpImage, frameTime)
    }

    // Run hand hand landmark using MediaPipe Hand Landmarker API
    @VisibleForTesting
    fun detectAsync(mpImage: MPImage, frameTime: Long) {
        handLandmarker?.detectAsync(mpImage, frameTime)
        // As we're using running mode LIVE_STREAM, the landmark result will
        // be returned in returnLivestreamResult function
    }

    // Return the landmark result to this HandLandmarkerHelper's caller
    private fun returnLivestreamResult(result: HandLandmarkerResult, input: MPImage) {
        handLandmarkerHelperListener?.onResults(
                ResultBundle(listOf(result), input.height, input.width)
        )
    }

    // Return errors thrown during detection to this HandLandmarkerHelper's
    // caller
    private fun returnLivestreamError(error: RuntimeException) {
        handLandmarkerHelperListener?.onError(error.message ?: "An unknown error has occurred")
    }

    companion object {
        const val TAG = "HandLandmarkerHelper"
    }

    data class ResultBundle(
            val results: List<HandLandmarkerResult>,
            val inputImageHeight: Int,
            val inputImageWidth: Int,
    )

    interface LandmarkerListener {
        fun onError(error: String)
        fun onResults(resultBundle: ResultBundle)
    }
}

================
File: java/com/example/lingoflow/MainActivity.kt
================
package com.example.lingoflow

import android.Manifest
import android.annotation.SuppressLint
import android.content.pm.PackageManager
import android.content.res.Configuration
import android.os.Bundle
import android.util.Log
import android.view.Surface
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.camera.core.AspectRatio
import androidx.camera.core.Camera
import androidx.camera.core.CameraSelector
import androidx.camera.core.ImageAnalysis
import androidx.camera.core.ImageProxy
import androidx.camera.core.Preview
import androidx.camera.view.PreviewView
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.core.content.ContextCompat
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

class MainActivity : AppCompatActivity(), HandLandmarkerHelper.LandmarkerListener {

    /** CameraX Components */
    private var preview: Preview? = null
    private var imageAnalyzer: ImageAnalysis? = null
    private var camera: Camera? = null
    private var cameraProvider: ProcessCameraProvider? = null
    private val cameraFacing = CameraSelector.LENS_FACING_BACK

    /** AI Processing */
    private lateinit var handLandmarkerHelper: HandLandmarkerHelper

    /** Executor for Background Tasks - Blocking ML operations are performed using this executor */
    private lateinit var cameraExecutor: ExecutorService

    /** Permission Request Launcher */
    private val requestPermissionLauncher =
            registerForActivityResult(ActivityResultContracts.RequestPermission()) {
                    isGranted: Boolean ->
                if (isGranted) {
                    Toast.makeText(this, "Permission granted", Toast.LENGTH_LONG).show()
                    initializeApp()
                } else {
                    // Check if the user has previously denied permission
                    if (shouldShowRequestPermissionRationale(Manifest.permission.CAMERA)) {
                        // User denied permission once but can still allow it
                        Toast.makeText(
                                        this,
                                        "Camera permission is required to use this app.",
                                        Toast.LENGTH_LONG
                                )
                                .show()
                    } else {
                        // User permanently denied permission (selected "Don't ask again")
                        Toast.makeText(
                                        this,
                                        "Permission denied. Enable it in app settings.",
                                        Toast.LENGTH_LONG
                                )
                                .show()
                    }
                }
            }

    // --------------------------------------------------------------
    // ✅ Activity Lifecycle Methods
    // --------------------------------------------------------------

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Initialize UI using findViewById
        setContentView(R.layout.activity_main)

        // Initialize background executor
        cameraExecutor = Executors.newSingleThreadExecutor()

        // Only request permission without setting up anything yet
        if (!hasPermissions(this)) {
            requestCameraPermission()
        } else {
            initializeApp()
        }
    }

    // Separate initialization logic into this function
    private fun initializeApp() {
        val viewFinder = findViewById<PreviewView>(R.id.view_finder)

        viewFinder.post { setupCamera() }

        // Initialize AI hand tracking model
        cameraExecutor.execute {
            handLandmarkerHelper =
                    HandLandmarkerHelper(
                            context = this,
                            handLandmarkerHelperListener = this
                    )
        }
    }

    override fun onResume() {
        super.onResume()
        // Ensure permissions are still granted (User may have revoked them while the app was in
        // paused state.)
        if (!hasPermissions(this)) {
            requestCameraPermission()
        }
        // Restart HandLandmarkerHelper when app returns to foreground
        cameraExecutor.execute {
            if (::handLandmarkerHelper.isInitialized && handLandmarkerHelper.isClose()) {
                handLandmarkerHelper.setupHandLandmarker()
            }
        }
    }

    override fun onPause() {
        super.onPause()
        if (::handLandmarkerHelper.isInitialized) {
            // Release AI processing resources
            cameraExecutor.execute { handLandmarkerHelper.clearHandLandmarker() }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        // Shut down background executor
        cameraExecutor.shutdown()
        cameraExecutor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS)
        handLandmarkerHelper.clearHandLandmarker()
    }

    override fun onBackPressed() {
        finish()
    }

    // --------------------------------------------------------------
    // ✅ Permission Handling
    // --------------------------------------------------------------

    private fun requestCameraPermission() {
        when {
            // Only setup the camera if permission is already granted
            hasPermissions(this) -> setupCamera()
            // Request permission first, do NOT setup the camera yet
            else -> requestPermissionLauncher.launch(Manifest.permission.CAMERA)
        }
    }

    // --------------------------------------------------------------
    // ✅ CameraX Setup
    // --------------------------------------------------------------

    /** Initializes CameraX and binds camera use cases */
    @SuppressLint("UnsafeOptInUsageError", "MissingPermission")
    private fun setupCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)
        cameraProviderFuture.addListener(
                {
                    cameraProvider = cameraProviderFuture.get()
                    bindCameraUseCases()
                },
                ContextCompat.getMainExecutor(this)
        )

        // Ensure HandLandmarkerHelper is initialized
        cameraExecutor.execute {
            handLandmarkerHelper =
                    HandLandmarkerHelper(
                            context = this,
                            handLandmarkerHelperListener = this
                    )
        }
    }

    /** Binds necessary CameraX use cases: Preview & Image Analysis */
    @SuppressLint("UnsafeOptInUsageError")
    private fun bindCameraUseCases() {
        val cameraProvider =
                cameraProvider ?: throw IllegalStateException("Camera initialization failed.")

        val cameraSelector = CameraSelector.Builder().requireLensFacing(cameraFacing).build()

        // Preview setup - Only using the 4:3 ratio because this is the closest to our models
        val viewFinder = findViewById<PreviewView>(R.id.view_finder)

        preview =
                Preview.Builder()
                        .setTargetAspectRatio(AspectRatio.RATIO_4_3)
                        .setTargetRotation(viewFinder.display?.rotation ?: Surface.ROTATION_0)
                        .build()
                        .also {
                            // Attach the viewfinder's surface provider to preview use case
                            it.setSurfaceProvider(viewFinder.surfaceProvider)
                        }

        // Image analysis setup (for hand tracking) - Using RGBA 8888 to match how our models work
        imageAnalyzer =
                ImageAnalysis.Builder()
                        .setTargetAspectRatio(AspectRatio.RATIO_4_3)
                        .setTargetRotation(viewFinder.display?.rotation ?: Surface.ROTATION_0)
                        .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                        .setOutputImageFormat(ImageAnalysis.OUTPUT_IMAGE_FORMAT_RGBA_8888)
                        .build()
                        // The analyzer can then be assigned to the instance
                        .also { it.setAnalyzer(cameraExecutor) { image -> detectHand(image) } }

        // Unbind previous use cases before rebinding
        cameraProvider.unbindAll()
        try {
            // A variable number of use-cases can be passed here -
            // camera provides access to CameraControl & CameraInfo
            camera = cameraProvider.bindToLifecycle(this, cameraSelector, preview, imageAnalyzer)
        } catch (exc: Exception) {
            Log.e(TAG, "Use case binding failed", exc)
        }
    }

    // --------------------------------------------------------------
    // ✅ AI Hand Tracking Processing
    // --------------------------------------------------------------

    /** Sends each camera frame to the AI model for hand landmark detection */
    private fun detectHand(imageProxy: ImageProxy) {
        handLandmarkerHelper.detectLiveStream(
                imageProxy = imageProxy
        )
    }

    /**
     * Updates UI after detecting hand landmarks - Extracts original image height/width to scale and
     * place the landmarks properly through OverlayView
     */
    override fun onResults(resultBundle: HandLandmarkerHelper.ResultBundle) {
        runOnUiThread {
            val overlay =
                    findViewById<OverlayView>(
                            R.id.overlay
                    )
            resultBundle.results.firstOrNull()?.let {
                // Pass necessary information to OverlayView for drawing on the canvas
                overlay.setResults(
                        it,
                        resultBundle.inputImageHeight,
                        resultBundle.inputImageWidth,
                )
                overlay.invalidate() // Redraw overlay
            }
        }
    }

    /** Handles errors during AI hand detection */
    override fun onError(error: String) {
        runOnUiThread { Toast.makeText(this, error, Toast.LENGTH_SHORT).show() }
    }

    override fun onConfigurationChanged(newConfig: Configuration) {
        super.onConfigurationChanged(newConfig)
        val viewFinder = findViewById<PreviewView>(R.id.view_finder)
        imageAnalyzer?.targetRotation = viewFinder.display?.rotation ?: Surface.ROTATION_0
    }

    companion object {
        private const val TAG = "MainActivity"
        private val PERMISSIONS_REQUIRED = arrayOf(Manifest.permission.CAMERA)

        /** Checks if all required permissions are granted */
        fun hasPermissions(context: AppCompatActivity) =
                PERMISSIONS_REQUIRED.all {
                    ContextCompat.checkSelfPermission(context, it) ==
                            PackageManager.PERMISSION_GRANTED
                }
    }
}

================
File: java/com/examples/lingoflow/OverlayView.kt
================
package com.example.lingoflow

import android.content.Context
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.util.AttributeSet
import android.view.View
import com.google.mediapipe.tasks.vision.handlandmarker.HandLandmarker
import com.google.mediapipe.tasks.vision.handlandmarker.HandLandmarkerResult
import kotlin.math.max

class OverlayView(context: Context?, attrs: AttributeSet?) : View(context, attrs) {

    private var results: HandLandmarkerResult? = null
    private val linePaint =
            Paint().apply {
                color = Color.BLUE
                strokeWidth = 8F
                style = Paint.Style.STROKE
            }
    private val pointPaint =
            Paint().apply {
                color = Color.YELLOW
                strokeWidth = 8F
                style = Paint.Style.FILL
            }

    private var scaleFactor = 1f
    private var imageWidth = 1
    private var imageHeight = 1

    override fun draw(canvas: Canvas) {
        super.draw(canvas)
        results?.landmarks()?.forEach { landmark ->
            landmark.forEach { point ->
                canvas.drawPoint(
                        point.x() * imageWidth * scaleFactor,
                        point.y() * imageHeight * scaleFactor,
                        pointPaint
                )
            }
            HandLandmarker.HAND_CONNECTIONS.forEach {
                val start = landmark[it!!.start()]
                val end = landmark[it.end()]
                canvas.drawLine(
                        start.x() * imageWidth * scaleFactor,
                        start.y() * imageHeight * scaleFactor,
                        end.x() * imageWidth * scaleFactor,
                        end.y() * imageHeight * scaleFactor,
                        linePaint
                )
            }
        }
    }

    fun setResults(
            handLandmarkerResults: HandLandmarkerResult,
            imageHeight: Int,
            imageWidth: Int,
    ) {
        results = handLandmarkerResults

        this.imageHeight = imageHeight
        this.imageWidth = imageWidth

        // PreviewView is in FILL_START mode. So we need to scale up the
        // landmarks to match with the size that the captured images will be
        // displayed.
        scaleFactor = max(width * 1f / imageWidth, height * 1f / imageHeight)

        invalidate()
    }
}

